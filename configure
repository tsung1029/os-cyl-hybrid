#!/bin/sh

# Multiplatform onfiguration script for osiris
#
################################################################################
# POSSIBLE ARGUMENTS
#
# [-s sytem]      selects side specific system file
#                 default: as previous
#
# [-d dimension]  Sets p_x_dim to selected value
#                 default: 2
#
# [-t type]       Selects compilation type out of <production, profile, debug>
#                 default production
#
################################################################################

show_help(){

cat << _EOF

Usage:
% ./configure [-h] [-s system] [-d dimension] [-t type]"
  
Valid systems:
_EOF
echo $valid_systems
}

# config
########

# $0 doesn' always expand the path so we need to work around it
currdir=$PWD
cd `dirname $0`
base_path=$PWD
cd $currdir

config_path="config"
osiris_conf="$base_path/$config_path/osiris_config"
bin_dir="bin"
build_dir="build"

valid_dimensions="1 2 3"
valid_types="production profile debug"

# get valid systems
old_dir=$PWD
cd $base_path/$config_path
valid_systems=`ls osiris_sys.*|sed 's/osiris_sys.//g'`
cd $old_dir


# read switches
###############

while getopts ":hs:d:t:l" opt; do
 case $opt in
    h)
      show_help
      exit 0
      ;;
    s) 
      system=$OPTARG
      ok=`echo $valid_systems | grep -c -w $system`
      if [ "$ok" = "0" ] 
      then
        echo "System configuration: '$system' not found"
        echo "Valid systems: "
        echo $valid_systems
        exit 2
      fi   
      ;;
    d) 
      dimension=$OPTARG
      ok=`echo $valid_dimensions | grep -c -w $dimension`
      if [ "$ok" = "0" ] 
      then
        echo "Invalid dimension: $dimension"
        echo "Valid dimensions are: "$valid_dimensions
        exit 2
      fi   
      ;;
    t)
      type=$OPTARG
      ok=`echo $valid_types | grep -c -w $type`
      if [ "$ok" = "0" ] 
      then
        echo "Invalid type: $type"
        echo "Valid types are: "$valid_types
        exit 2
      fi   
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

# system

if [ -z "$system" ]
then
  if [ -e $osiris_conf ]
  then
    system=`awk '/SYSTEM/ {print $3}' ${osiris_conf}`
  else
    echo "No system defined, aborting."
    exit 3
  fi
fi

# dimension

if [ -z "$dimension" ]
then
  if [ -e $osiris_conf ]
  then
    dimension=`awk '/OS_DIM/ {print $3}' ${osiris_conf}`
  else
    echo "(*warning*) No dimension specified, defaulting to 2."
    dimension=2
  fi
fi

if [ -z "$type" ]
then
  if [ -e $osiris_conf ]
  then
    type=`awk '/COMPILATION_TYPE/ {print $3}' ${osiris_conf}`
  else
    echo "(*warning*) No compilation type specified, defaulting to production."
    type=production
  fi
fi


### create osiris_conf
echo ""
echo "OSIRIS Configuration:"
echo "--------------------"
echo "           System : '$system'"
echo " Compilation Type : '$type'"
echo "       Dimensions : '$dimension'"
echo

cat << _EOF > ${osiris_conf}
######################################################
# File generated by configure script. Do NOT modify! #
######################################################

# dimension of code
###################
OS_DIM = ${dimension}

# compilation type
##################
COMPILATION_TYPE = ${type}

# system
########
SYSTEM = ${system}

#include system specific config
###############################
-include ../${config_path}/osiris_sys.${system}

_EOF

# Create required directories and Makefile link

if [ ! -d $base_path/$bin_dir ]
then
  mkdir $base_path/$bin_dir
fi

if [ ! -d $base_path/$build_dir ]
then
  mkdir $base_path/$build_dir
fi

if [ ! -e $base_path/$build_dir/Makefile ]
then
  ln -s $base_path/$config_path/Makefile.build $base_path/$build_dir/Makefile
fi

